#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct Color {
    pub number: &'static str,
    pub name: &'static str,
    pub hue: Hue,
    pub saturation: Saturation,
    pub brightness: Brightness,
    pub rgb: Rgb,
}

impl Color {
    const fn new(
        number: &'static str,
        name: &'static str,
        hue: Hue,
        saturation: Saturation,
        brightness: Brightness,
        rgb: Rgb,
    ) -> Self {
        Self {
            number,
            name,
            hue,
            saturation,
            brightness,
            rgb,
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct Rgb {
    pub r: u8,
    pub g: u8,
    pub b: u8,
}

impl Rgb {
    const fn new(r: u8, g: u8, b: u8) -> Self {
        Self { r, g, b }
    }
}

/// Hue (aka. Dominant Color Family)
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Hue {
    BlueViolet,
    Violet,
    RedViolet,
    Red,
    YellowRed,
    Yellow,
    YellowGreen,
    Green,
    BlueGreen,
    Blue,
    Earth,
    CoolGray,
    NeutralGray,
    TonerGray,
    WarmGray,
    Achromatic,
    Flourescent,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Saturation {
    S0,
    S1,
    S2,
    S3,
    S4,
    S5,
    S6,
    S7,
    S8,
    S9,
    Undefined,
}

impl Saturation {
    fn to_u8(self) -> Option<u8> {
        match self {
            Saturation::S0 => Some(0),
            Saturation::S1 => Some(1),
            Saturation::S2 => Some(2),
            Saturation::S3 => Some(3),
            Saturation::S4 => Some(4),
            Saturation::S5 => Some(5),
            Saturation::S6 => Some(6),
            Saturation::S7 => Some(7),
            Saturation::S8 => Some(8),
            Saturation::S9 => Some(9),
            Saturation::Undefined => None,
        }
    }
}

impl PartialOrd for Saturation {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        let n = self.to_u8()?;
        let m = other.to_u8()?;
        Some(n.cmp(&m))
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Brightness {
    B000,
    B00,
    B0,
    B1,
    B2,
    B3,
    B4,
    B5,
    B6,
    B7,
    B8,
    B9,
    Undefined,
}

impl Brightness {
    fn to_u8(self) -> Option<u8> {
        match self {
            Brightness::B000 => Some(0),
            Brightness::B00 => Some(1),
            Brightness::B0 => Some(2),
            Brightness::B1 => Some(3),
            Brightness::B2 => Some(4),
            Brightness::B3 => Some(5),
            Brightness::B4 => Some(6),
            Brightness::B5 => Some(7),
            Brightness::B6 => Some(8),
            Brightness::B7 => Some(9),
            Brightness::B8 => Some(10),
            Brightness::B9 => Some(11),
            Brightness::Undefined => None,
        }
    }
}

impl PartialOrd for Brightness {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        let n = self.to_u8()?;
        let m = other.to_u8()?;
        Some(n.cmp(&m))
    }
}

// TODO: all_colors()

pub const COLOR_BV0000: Color = Color::new(
    "BV0000",
    "Pale Thistle",
    Hue::BlueViolet,
    Saturation::S0,
    Brightness::B000,
    Rgb::new(238, 236, 245),
);

pub const COLOR_BV000: Color = Color::new(
    "BV000",
    "Iridescent Mauve",
    Hue::BlueViolet,
    Saturation::S0,
    Brightness::B00,
    Rgb::new(238, 231, 241),
);

// #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
// pub enum Color {
//
//     BV000,
//     BV00,
//     BV01,
//     BV02,
//     BV04,
//     BV08,
//     BV11,
//     BV13,
//     BV17,
//     BV20,
//     BV23,
//     BV25,
//     BV29,
//     BV31,
//     BV34,
//     V0000,
//     V000,
//     V01,
//     V04,
//     V05,
//     V06,
//     V09,
//     V12,
//     V15,
//     V17,
//     V20,
//     V22,
//     V25,
//     V28,
//     V91,
//     V93,
//     V95,
//     V99,
//     RV0000,
//     RV000,
//     RV00,
//     RV02,
//     RV04,
//     RV06,
//     RV09,
//     RV10,
//     RV11,
//     RV13,
//     RV14,
//     RV17,
//     RV19,
//     RV21,
//     RV23,
//     RV25,
//     RV29,
//     RV32,
//     RV34,
//     RV42,
//     RV52,
//     RV55,
//     RV63,
//     RV66,
//     RV69,
//     RV91,
//     RV93,
//     RV95,
//     RV99,
//     R0000,
//     R000,
//     R00,
//     R01,
//     R02,
//     R05,
//     R08,
//     R11,
//     R12,
//     R14,
//     R17,
//     R20,
//     R21,
//     R22,
//     R24,
//     R27,
//     R29,
//     R30,
//     R32,
//     R35,
//     R37,
//     R39,
//     R43,
//     R46,
//     R56,
//     R59,
//     R81,
//     R83,
//     R85,
//     R89,
//     YR0000,
//     YR000,
//     YR00,
//     YR01,
//     YR02,
//     YR04,
//     YR07,
//     YR09,
//     YR12,
//     YR14,
//     YR15,
//     YR16,
//     YR18,
//     YR20,
//     YR21,
//     YR23,
//     YR24,
//     YR27,
//     YR30,
//     YR31,
//     YR61,
//     YR65,
//     YR68,
//     YR82,
//     Y0000,
//     Y000,
//     Y00,
//     Y02,
//     Y04,
//     Y06,
//     Y08,
//     Y11,
//     Y13,
//     Y15,
//     Y17,
//     Y18,
//     Y19,
//     Y21,
//     Y23,
//     Y26,
//     Y28,
//     Y32,
//     Y35,
//     Y38,
//     YG0000,
//     YG00,
//     YG01,
//     YG03,
//     YG05,
//     YG06,
//     YG07,
//     YG09,
//     YG11,
//     YG13,
//     YG17,
//     YG21,
//     YG23,
//     YG25,
//     YG41,
//     YG45,
//     YG61,
//     YG63,
//     YG91,
//     YG93,
//     YG95,
//     YG97,
//     YG99,
//     G0000,
//     G000,
//     G00,
//     G02,
//     G03,
//     G05,
//     G07,
//     G09,
//     G12,
//     G14,
//     G16,
//     G17,
//     G19,
//     G20,
//     G21,
//     G24,
//     G28,
//     G40,
//     G43,
//     G46,
//     G82,
//     G85,
//     G94,
//     G99,
//     BG0000,
//     BG000,
//     BG01,
//     BG02,
//     BG05,
//     BG07,
//     BG09,
//     BG10,
//     BG11,
//     BG13,
//     BG15,
//     BG18,
//     BG23,
//     BG32,
//     BG34,
//     BG45,
//     BG49,
//     BG53,
//     BG57,
//     BG70,
//     BG72,
//     BG75,
//     BG78,
//     BG90,
//     BG93,
//     BG96,
//     BG99,
//     B0000,
//     B000,
//     B00,
//     B01,
//     B02,
//     B04,
//     B05,
//     B06,
//     B12,
//     B14,
//     B16,
//     B18,
//     B21,
//     B23,
//     B24,
//     B26,
//     B28,
//     B29,
//     B32,
//     B34,
//     B37,
//     B39,
//     B41,
//     B45,
//     B52,
//     B60,
//     B63,
//     B66,
//     B69,
//     B79,
//     B91,
//     B93,
//     B95,
//     B97,
//     B99,
//     E0000,
//     E000,
//     E00,
//     E01,
//     E02,
//     E04,
//     E07,
//     E08,
//     E09,
//     E11,
//     E13,
//     E15,
//     E17,
//     E18,
//     E19,
//     E21,
//     E23,
//     E25,
//     E27,
//     E29,
//     E30,
//     E31,
//     E33,
//     E34,
//     E35,
//     E37,
//     E39,
//     E40,
//     E41,
//     E42,
//     E43,
//     E44,
//     E47,
//     E49,
//     E50,
//     E51,
//     E53,
//     E55,
//     E57,
//     E59,
//     E70,
//     E71,
//     E74,
//     E77,
//     E79,
//     E81,
//     E84,
//     E87,
//     E89,
//     E93,
//     E95,
//     E97,
//     E99,
//     C00,
//     C0,
//     C1,
//     C2,
//     C3,
//     C4,
//     C5,
//     C6,
//     C7,
//     C8,
//     C9,
//     C10,
//     N0,
//     N1,
//     N2,
//     N3,
//     N4,
//     N5,
//     N6,
//     N7,
//     N8,
//     N9,
//     N10,
//     T0,
//     T1,
//     T2,
//     T3,
//     T4,
//     T5,
//     T6,
//     T7,
//     T8,
//     T9,
//     T10,
//     W00,
//     W0,
//     W1,
//     W2,
//     W3,
//     W4,
//     W5,
//     W6,
//     W7,
//     W8,
//     W9,
//     W10,
//     // 0, 100, 110
//     FV,
//     FRV,
//     FYR,
//     FY,
//     FYG,
//     FG,
//     FBG,
//     FB,
// }
